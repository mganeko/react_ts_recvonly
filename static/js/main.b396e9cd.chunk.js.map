{"version":3,"sources":["video.tsx","index.tsx"],"names":["Video","props","elementRef","useRef","useEffect","stream","volumeValue","volume","current","srcObject","console","log","id","controls","className","ref","width","height","autoPlay","muted","playsInline","roomId","roomFromUrl","search","window","location","results","RegExp","exec","room","getRoomFromUrl","signalingKey","keyFromUrl","key","getKeyFromUrl","sora","Sora","connection","App","subscriber","state","connected","videoCodec","remoteStreams","connect","bind","disconnect","handleRoomChange","handleKeyChange","addRemoteStream","removeRemoteStream","removeAllRemoteStream","e","preventDefault","this","warn","metadata","signaling_key","options","audio","multistream","video","videoCodecType","videoBitRate","app","recvonly","on","event","streams","kind","track","targetStream","target","trackCount","getTracks","length","handleDisconnect","then","setState","catch","err","error","value","clonedStreams","Object","assign","remoteVideos","keys","forEach","push","type","size","onChange","disabled","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b396e9cd.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport './video.css';\n\n// ------ Video Component ------\ninterface VideoPropsInterface {\n  children: never[];\n  volume?: number;\n  stream: MediaStream | null;\n  id: string;\n  controls?: boolean;\n  width: string;\n  height: string;\n}\n\n\nfunction Video(props: VideoPropsInterface) {\n  const elementRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    const stream = props.stream;\n    let volumeValue = 0;\n    if (props.volume) {\n      volumeValue = props.volume;\n    }\n\n    const current: HTMLVideoElement | null = elementRef.current;\n    if (current != null) {\n      if (current.srcObject === stream) {\n        console.log('useEffect() same stream, so skip:', stream);\n      }\n      else {\n        current.srcObject = stream;\n        console.log('useEffect() set stream:', stream);\n      }\n\n      current.volume = volumeValue;\n    }\n    else {\n      console.log('useEffect() ref.current NULL');\n    }\n\n  });\n\n  console.log('Video rendering, id=%s', props.id);\n  const controls = props.controls;\n  if (controls) {\n    return (\n      <video className=\"video_with_border\" ref={elementRef} id={props.id} width={props.width} height={props.height} autoPlay muted playsInline controls ></video>\n    );\n  }\n  else {\n    return (\n      <video className=\"video_with_border\" ref={elementRef} id={props.id} width={props.width} height={props.height} autoPlay muted playsInline ></video>\n    );\n  }\n}\n\nexport default Video;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Video from './video'; // video.tsx\n//import Sora from 'sora-js-sdk';\nimport Sora, {\n  //AudioCodecType,\n  ConnectionOptions,\n  //ConnectionPublisher,\n  ConnectionSubscriber,\n  VideoCodecType,\n} from \"sora-js-sdk\";\n\nimport { MouseEvent } from 'react';\n\nimport './index.css';\n\n// ----\n// TODO\n// ----\n\n// ------ params -----\nconst signalingUrl = 'wss://sora-labo.shiguredo.jp/signaling';\nlet roomId = 'user@sora-room';\nconst roomFromUrl = getRoomFromUrl();\nif (roomFromUrl && (roomFromUrl !== '')) {\n  roomId = roomFromUrl;\n}\nlet signalingKey = '';\nconst keyFromUrl = getKeyFromUrl();\nif (keyFromUrl && (keyFromUrl !== '')) {\n  signalingKey = keyFromUrl;\n}\n\n// ---- URL ----\nfunction getRoomFromUrl(): string {\n  const search = window.location.search;\n  const re = new RegExp('room=([^&=]+)');\n  const results = re.exec(search);\n  let room = '';\n  if (results) {\n    room = results[1];\n  }\n  return room;\n}\n\nfunction getKeyFromUrl(): string | null {\n  const search = window.location.search;\n  const re = new RegExp('key=([^&=]+)');\n  const results = re.exec(search);\n  let key = null;\n  if (results) {\n    key = results[1];\n  }\n  return key;\n}\n\n// --- Sora -----\nconst debug = false; //true;\nconst sora = Sora.connection(signalingUrl, debug);\n\n// ------ App class ------\n// interface SoraAppPropsInterface {\n//   text?: string;\n// }\n\ninterface SoraAppStateInterface {\n  //playing: boolean;\n  connected: boolean;\n  roomId: string;\n  signalingKey: string;\n  videoCodec: VideoCodecType;\n  remoteStreams: { [key: string]: MediaStream; }\n}\n\nclass App extends React.Component {\n  //localStream: MediaStream | null;\n  subscriber: ConnectionSubscriber | null;\n  state: SoraAppStateInterface;\n\n  constructor(props: object) {\n    super(props);\n    //this.localStream = null;\n    this.state = {\n      //playing: false,\n      connected: false,\n      roomId: roomId,\n      signalingKey: signalingKey,\n      videoCodec: 'H264',\n      remoteStreams: {},\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    //this.startVideo = this.startVideo.bind(this);\n    //this.stopVideoHandler = this.stopVideoHandler.bind(this);\n    //this.stopVideo = this.stopVideo.bind(this);\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.handleRoomChange = this.handleRoomChange.bind(this);\n    this.handleKeyChange = this.handleKeyChange.bind(this);\n    //this.handleCodecChange = this.handleCodecChange.bind(this);\n    this.addRemoteStream = this.addRemoteStream.bind(this);\n    this.removeRemoteStream = this.removeRemoteStream.bind(this);\n    this.removeAllRemoteStream = this.removeAllRemoteStream.bind(this);\n\n    // -- Sora connection --\n    this.subscriber = null;\n  }\n\n  componentDidMount() {\n    console.log('App DidMound()');\n  }\n\n  componentWillUnmount() {\n    console.log('App WillUnmount()');\n    //if (this.localStream) {\n    //  this.stopVideo();\n    //}\n  }\n\n  // -----------\n  // startVideo(e: MouseEvent<HTMLButtonElement>) {\n  //   e.preventDefault();\n  //   console.log('start Video');\n  //   if (this.localStream) {\n  //     console.warn('localVideo ALREADY started');\n  //     return;\n  //   }\n\n  //   const constraints = { video: true, audio: true };\n  //   navigator.mediaDevices.getUserMedia(constraints)\n  //     .then(stream => {\n  //       this.localStream = stream;\n  //       this.setState({ playing: true });\n  //     })\n  //     .catch(err => console.error('media ERROR:', err));\n  // }\n\n  // stopVideoHandler(e: MouseEvent<HTMLButtonElement>) {\n  //   e.preventDefault();\n  //   console.log('stop Video');\n  //   this.stopVideo();\n  // }\n\n  // stopVideo() {\n  //   if (this.localStream) {\n  //     this.localStream.getTracks().forEach(track => track.stop());\n  //     this.localStream = null;\n  //     this.setState({ playing: false });\n  //   }\n  // }\n\n  // -----------------\n  connect(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    console.log('connect');\n    if (this.subscriber) {\n      console.warn('ALREADY connected');\n      return;\n    }\n\n    const metadata = {\n      signaling_key: this.state.signalingKey\n    };\n    const options: ConnectionOptions = {\n      audio: true,\n      multistream: false,\n      video: true,\n      videoCodecType: this.state.videoCodec,\n      videoBitRate: 800,\n    };\n    const app = this;\n    //console.log('app:', app);\n\n    console.log('connecting roomId=%s codec=%s key=%s', this.state.roomId, options.videoCodecType, this.state.signalingKey);\n    this.subscriber = sora.recvonly(this.state.roomId, metadata, options);\n\n    this.subscriber.on('track', function (event: RTCTrackEvent) {\n      const stream = event.streams[0];\n      if (stream) {\n        console.log('addtrack stream.id=%s', stream.id);\n      }\n      else {\n        console.warn('NO stream in on track');\n        return;\n      }\n\n      // --- for multi stream ---\n      const id = 'remote_' + stream.id;\n      app.addRemoteStream(id, stream);\n    });\n\n    this.subscriber.on('removetrack', function (event: MediaStreamTrackEvent) {\n      const kind = event.track?.kind;\n      const targetStream = event.target as MediaStream;\n      if (targetStream != null) {\n        const trackCount = targetStream.getTracks().length;\n        console.log('removetracks stream.id=%s, trackKind=%s, track count=%d', targetStream.id, kind, trackCount);\n        if (trackCount > 0) {\n          return;\n        }\n\n        // --- for multi stream ---\n        const id = 'remote_' + targetStream.id;\n        app.removeRemoteStream(id);\n      }\n    });\n\n    this.subscriber.on('disconnect', (e: any) => {\n      console.log('sora disconnected:', e);\n      this.handleDisconnect()\n    });\n\n    this.subscriber.connect()\n      .then(() => {\n        console.log('sora connected');\n        app.setState({ connected: true });\n      })\n      .catch((err: any) => {\n        console.error('sora connect ERROR:', err);\n        this.subscriber = null;\n        this.setState({ connected: false });\n      });\n  }\n\n  disconnect(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    console.log('disconnect');\n    this.handleDisconnect();\n  }\n\n  handleDisconnect() {\n    if (this.subscriber) {\n      this.subscriber.disconnect();\n      this.subscriber = null;\n    }\n\n    this.removeAllRemoteStream();\n    this.setState({ connected: false });\n  }\n\n  handleRoomChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ roomId: e.target.value });\n  }\n\n  handleKeyChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ signalingKey: e.target.value });\n  }\n\n  // handleCodecChange(e: React.ChangeEvent<HTMLSelectElement>) {\n  //   this.setState({ videoCodec: e.target.value });\n  // }\n\n  addRemoteStream(id: string, stream: MediaStream) {\n    if (this.state.remoteStreams[id]) {\n      // already exist\n      console.log('remote stream ALREADY exist id=' + id);\n      return;\n    }\n\n    const clonedStreams = Object.assign({}, this.state.remoteStreams);\n    clonedStreams[id] = stream;\n    this.setState({ remoteStreams: clonedStreams });\n  }\n\n  removeRemoteStream(id: string) {\n    const clonedStreams = Object.assign({}, this.state.remoteStreams);\n    delete clonedStreams[id];\n    this.setState({ remoteStreams: clonedStreams });\n  }\n\n  removeAllRemoteStream() {\n    const newStreams = {};\n    this.setState({ remoteStreams: newStreams });\n  }\n\n  // -----------------\n  render() {\n    console.log('App render()');\n\n    const remoteVideos: JSX.Element[] = [];\n    Object.keys(this.state.remoteStreams).forEach(function (this: { [key: string]: MediaStream; }, key: string) {\n      const stream: MediaStream = this[key]; // this は this.state.remoteStream\n      console.log('key=id=%s, stream.id=%s', key, stream.id);\n      remoteVideos.push(\n        <Video id={key} key={key} width={\"100%\"} height={\"\"} volume={0.5} controls={true} stream={stream}>\n        </Video>\n      );\n    }, this.state.remoteStreams);\n\n    return (\n      <div className=\"App\" >\n        React-Sora RecvOnly for momo monitor<br />\n        { /*\n        Video Codec:\n        <select value={this.state.videoCodec} onChange={this.handleCodecChange} disabled={this.state.connected} >\n          <option value=\"VP8\">VP8</option>\n          <option value=\"VP9\">VP9</option>\n          <option value=\"H264\">H264</option>\n          <option value=\"H265\">H265</option>\n        </select>\n        &nbsp;\n        <button onClick={this.startVideo} disabled={this.state.playing || this.state.connected}> Start Video</button >\n        <button onClick={this.stopVideo} disabled={!this.state.playing || this.state.connected}>Stop Video</button>\n        <br />\n        */ }\n        SignalingKey: <input id=\"signaling_key\" type=\"text\" size={32} value={this.state.signalingKey} onChange={this.handleKeyChange} disabled={this.state.connected}></input>\n        <br />\n        Room: <input id=\"room_id\" type=\"text\" value={this.state.roomId} onChange={this.handleRoomChange} disabled={this.state.connected}></input>\n        <button onClick={this.connect} disabled={this.state.connected}> Connect</button >\n        <button onClick={this.disconnect} disabled={!this.state.connected}>Disconnect</button>\n        <br />\n        <div className=\"VideoContainer\">\n          { /* <Video id={\"local_video\"} width={\"160px\"} height={\"120px\"} stream={this.localStream} \n          </Video> */ }\n          <div className=\"RemoteContainer\">\n            {remoteVideos}\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\n// ====================== ReactDOM rendering ====================\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}